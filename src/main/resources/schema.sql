CREATE TABLE IF NOT EXISTS mpa (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS genre (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS event_types (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS operations (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR NOT NULL,
    login VARCHAR UNIQUE NOT NULL,
    name VARCHAR,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR NOT NULL,
    description VARCHAR NOT NULL,
    release_date DATE,
    duration INTEGER NOT NULL,
    rate INTEGER NOT NULL,
    mpa_id INTEGER,

    CONSTRAINT fk_film_mpa FOREIGN KEY (mpa_id) REFERENCES mpa (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER,
    genre_id INTEGER,

    CONSTRAINT pk_film_genres PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film_genre FOREIGN KEY (genre_id) REFERENCES genre (id) ON DELETE CASCADE,
    CONSTRAINT fk_film_id FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friend_list (
    user_id INTEGER,
    friend_id INTEGER,
    state BOOLEAN,

    CONSTRAINT pk_friend_list PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_friend_list_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_friend_list_friend FOREIGN KEY (friend_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS likes (
    user_id INTEGER,
    film_id INTEGER,

    CONSTRAINT pk_likes PRIMARY KEY (user_id, film_id),
    CONSTRAINT fk_like_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_film_like FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews (

    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER,
    film_id INTEGER,
    content VARCHAR NOT NULL,
    is_positive BOOLEAN NOT NULL,
    useful INTEGER NOT NULL,

    CONSTRAINT fk_reviews_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_reviews_film_id FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS events (

    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER,
    type INTEGER,
    operation INTEGER,
    entity_id INTEGER NOT NULL,
    useful INTEGER NOT NULL,

    CONSTRAINT fk_event_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_event_type_id FOREIGN KEY (type) REFERENCES event_types (id) ON DELETE CASCADE,
    CONSTRAINT fk_event_operation_id FOREIGN KEY (operation) REFERENCES operations (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS directors (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS film_directors (
    director_id INTEGER,
    film_id INTEGER,

    CONSTRAINT pk_film_directors PRIMARY KEY (director_id, film_id),
    CONSTRAINT fk_film_directors_director_id FOREIGN KEY (director_id) REFERENCES directors (id) ON DELETE CASCADE,
    CONSTRAINT fk_film_directors_film_id FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes (
    user_id INTEGER,
    review_id INTEGER,
    value BOOLEAN,

    CONSTRAINT pk_review_likes PRIMARY KEY (user_id, review_id),
    CONSTRAINT fk_review_likes_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_review_likes_review_id FOREIGN KEY (review_id) REFERENCES reviews (id) ON DELETE CASCADE
);
